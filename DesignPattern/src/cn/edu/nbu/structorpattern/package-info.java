/**
 * @author lenovo
 *结构型模式，共七种：
 *对象的适配器模式是各种模式的起源
 *
 *适配器模式、
 *适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题
 *类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。
 *对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。
 *接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可
 *
 *装饰者模式 
 *
 *装饰模式又名包装(Wrapper)模式。装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案
 *优点：1、装饰者与被装饰者相互独立，不会耦合。2、良好的扩展性3、可以作为继承的代替
 *应用场景：
 *1、需要扩展一个类的功能，或者增加附加功能
 *2、需要动态为对象添加功能，这些功能还需要动态地撤销
 *3、需要对一批类进行改装或者增加附加功能
 *缺点：产生过多相似的对象，不易排错！
 *
 *代理模式、
 *产生代理类，替原对象执行一些操作
 *
 *外观模式、
 *外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，
 *而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口
 *
 *桥接模式、
 *桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，
 *使得二者可以独立变化，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，
 *在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就是JDBC提供统一接口，
 *每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了
 *
 *组合模式、
 *组合模式有时又叫部分-整体模式在处理类似树形结构的问题时比较方便
 *将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数
 *
 *享元模式
 *主要目的是实现对象的共享，即共享池，当系统中对象多的时候恶意减少内存的开销，通常与工厂模式一起使用
 *应用JDBC连接池
 */
package cn.edu.nbu.structorpattern;