/**
 * @author lenovo
 *创建型设计模式
 *创建型模式，共五种：
 *工厂方法模式、
 *抽象工厂模式、
 *单例模式：
 *单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。
 *这样的模式有几个好处：
 *1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。
 *2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。
 *3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。
 *所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。在Java指令中创建对象和赋值操作是分开进行的，
 *也就是说instance = new Singleton();语句是分两步执行的。
 *但是JVM并不保证这两个操作的先后顺序，也就是说有可能JVM会为新的Singleton实例分配空间，
 *然后直接赋值给instance成员，然后再去初始化这个Singleton实例。实际情况是，单例模式使用内部类来维护单例的实现，
 *JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。
 *方法二：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开，单独为创建加synchronized关键字，也可以（具体见TestSingleton）
 *建造者模式
 *工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，
 *用来创建复合对象，所谓复合对象就是指某个类具有不同的属性
 *原型模式
 *原型模式虽然是创建型的模式，但是与工程模式没有关系，
 *从名字即可看出，该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象
 *了解对象深、浅复制的概念：
 *浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。
 *深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的
 */
package cn.edu.nbu.creativepattern;